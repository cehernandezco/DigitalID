package com.example.digitalid.database;


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import com.example.digitalid.entities.User;

import androidx.annotation.Nullable;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static com.example.digitalid.entities.Constants.CONST_DATABASE_NAME;
import static com.example.digitalid.entities.Constants.CONST_DATABASE_VERSION;

/**
 * Helper class where we will write all operations related to the database
 */
public class UserDatabaseHelper extends SQLiteOpenHelper {

    private static final String TAG = UserDatabaseHelper.class.getName();

    private static UserDatabaseHelper mInstance = null;
    private Context context;

    //create database constants
    private static final String DATABASE_NAME = CONST_DATABASE_NAME;
    private static final Integer DATABASE_VERSION = CONST_DATABASE_VERSION;
    private static final String TABLE_USER = "user";

    //create constants for the table's column name
    private static final String COL_ID = "ID";
    private static final String COL_NAME = "NAME";
    private static final String COL_LASTNAME = "LASTNAME";
    private static final String COL_COUNTRY = "COUNTRY";
    private static final String COL_EMAIL = "EMAIL";
    private static final String COL_USERNAME = "USERNAME";
    private static final String COL_PASSWORD = "PASSWORD";
    private static final String COL_DOB = "DOB";
    private static final String COL_PASSCODE = "PASSCODE";
    private static final String COL_LOGINBIOMETRICS = "LOGIN_BIOMETRICS";

    //create sql statements initial version
    //user Table
    private static final String CREATE_USER_TABLE_ST = "CREATE TABLE " + TABLE_USER + "(" + COL_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COL_NAME + " TEXT, " +
            COL_LASTNAME + " TEXT, " +
            COL_COUNTRY + " INTEGER, " +
            COL_EMAIL + " TEXT, " +
            COL_USERNAME + " TEXT , " +
            COL_PASSWORD + " TEXT , " +
            COL_DOB + " DATE , " +
            COL_PASSCODE + " INTEGER , " +
            COL_LOGINBIOMETRICS + " INTEGER DEFAULT 0 " +
            " )";

    private static final String DROP_USER_TABLE_ST = "DROP TABLE IF EXISTS " + TABLE_USER;
    private static final String GET_ALL_USERS_ST = "SELECT * FROM " + TABLE_USER;
    private static final String GET_USER_BY_ID = "SELECT * FROM " + TABLE_USER + " WHERE " + COL_ID + "= ?";
    private static final String UPDATE_USER_BIOMETRICS = "UPDATE " + TABLE_USER + " SET " + COL_LOGINBIOMETRICS + " = ?" + " WHERE " + COL_ID + "= ?";
    private static final String UPDATE_USER_PASSWORD = "UPDATE " + TABLE_USER + " SET " + COL_PASSWORD + " = ?" + " WHERE " + COL_ID + "= ?";

    public static synchronized UserDatabaseHelper getInstance(Context ctx) {
        if (mInstance == null) {
            mInstance = new UserDatabaseHelper(ctx.getApplicationContext());
        }
        return mInstance;
    }

    /**
     * Set the new version of the database (newVersion specified in the constant DATABASE_VERSION),
     * if the database new version is greater than the
     * database version stored inside of the database( oldVersion, written there when the db was created ) then
     * the onUpgrade method will be called.
     *
     * @param context provides access to the Activity resources
     */
    private UserDatabaseHelper(@Nullable Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        this.context = context;
    }

    /**
     * this method gets executed only if the database does not exists
     */
    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        sqLiteDatabase.execSQL(CREATE_USER_TABLE_ST);
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
        sqLiteDatabase.execSQL(DROP_USER_TABLE_ST);
        onCreate(sqLiteDatabase);
    }

    /**
     * Add a user to the database
     * @param name          User's name
     * @param lastname      User's lastname
     * @param country       User's country code
     * @param email         User's email
     * @return      if it succeeded, the autogenerated id (primary key) of the recently added User
     *              otherwise -1
     */
    public Long insertUser(String name, String lastname, Integer country, String email, String username, String password, Date dob) {
        //create an instance of SQLITE database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(COL_NAME, name);
        contentValues.put(COL_LASTNAME, lastname);
        contentValues.put(COL_COUNTRY, country);
        contentValues.put(COL_EMAIL, email);
        contentValues.put(COL_USERNAME, username);
        contentValues.put(COL_PASSWORD, password);
        contentValues.put(COL_DOB, dob.toString());

        long result = db.insert(TABLE_USER, null, contentValues);
        db.close();
        //if result is -1  insert was not performed due to an error, otherwise will have the row ID of the newly inserted row
        return result;
    }

    /**
     * @return  A cursor of all monsters in the table called monster.
     */
    private Cursor getAllUsers() {
        SQLiteDatabase db = this.getReadableDatabase();
        return db.rawQuery(GET_ALL_USERS_ST, null);
    }

    /**
     * Update a monster record in the database
     * @param id            Primary key of the monster
     * @param name          New Monster's name
     * @param lastname   New Monster's description
     * @param username     New Monster's Scariness level
     * @return      true is the monster record in the database was updated, otherwise false.
     */
    public boolean updateUser(Long id, String name, String lastname, Integer country, String email, String username, Date dob) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(COL_ID, id);
        contentValues.put(COL_NAME, name);
        contentValues.put(COL_LASTNAME, lastname);
        contentValues.put(COL_COUNTRY, country);
        contentValues.put(COL_EMAIL, email);
        contentValues.put(COL_USERNAME, username);
        contentValues.put(COL_DOB, dob.toString());

        int numOfRowsUpdated = db.update(TABLE_USER, contentValues, "ID = ?", new String[]{id.toString()});
        db.close();
        return numOfRowsUpdated == 1; //if your query is going to update more than 1 record (this is not the case) then the condition will be numRowsUpdated > 0
    }

    /**
     * Delete a monster from the database
     * @param id    Monster's primary key
     * @return      true if the monster was deleted, otherwise false
     */
    public boolean deleteUser(Long id) {
        SQLiteDatabase db = this.getWritableDatabase();
        //delete return the # of rows affected by the query
        int numOfRowsDeleted = db.delete(TABLE_USER, "ID = ?", new String[]{id.toString()});
        db.close();
        return numOfRowsDeleted == 1;//if your query is going to delete more than 1 record (this is not the case) then the condition will be numOfRowsDeleted > 0
    }



    /**
     * @return a list of all monsters from the database table called monster
     */
    public List<User> getUsers() {
        List<User> users = new ArrayList<>();
        Cursor cursor = getAllUsers();

        if(cursor.getCount() > 0) {
            User user;
            while (cursor.moveToNext()) {
                Long id = cursor.getLong(0);
                String name = cursor.getString(1);
                String lastname = cursor.getString(2);
                Integer country = cursor.getInt(3);
                String email = cursor.getString(4);
                String username = cursor.getString(5);
                Date dob = new Date(cursor.getString(7));

                user = new User(id, name, lastname, country, email, username, dob);
                users.add(user);
            }
        }
        cursor.close();
        return users;
    }

    public User getUser(Long id) {
        SQLiteDatabase db = this.getReadableDatabase();
        User user = null;
        Cursor cursor = db.rawQuery(GET_USER_BY_ID, new String[]{id.toString()});

        if(cursor.getCount() > 0 ){
            while (cursor.moveToNext()){
                String name = cursor.getString(1);
                String lastname = cursor.getString(2);
                Integer country = cursor.getInt(3);
                String email = cursor.getString(4);
                String username = cursor.getString(5);
                Date dob = new Date(cursor.getString(7));

                user = new User(id, name, lastname, country, email, username, dob);
            }
        }
        cursor.close();
        return user;
    }

    public boolean update_loginBiometricsUser(Long id, Integer loginBiometrics){
        SQLiteDatabase db = this.getWritableDatabase();
        Integer loginBiometricsValue = 0;
        if(loginBiometrics < 1){
            loginBiometricsValue = loginBiometrics;
        }
        db.execSQL(UPDATE_USER_BIOMETRICS, new String[ ]{ loginBiometricsValue.toString(), id.toString() });
        return true;
    }
    public boolean updatePasswordUser(Long id, String password){
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL(UPDATE_USER_PASSWORD, new String[ ]{ password, id.toString() });
        return true;
    }
}

