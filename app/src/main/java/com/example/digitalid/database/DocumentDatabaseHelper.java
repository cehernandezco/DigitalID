package com.example.digitalid.database;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import com.example.digitalid.entities.Document;
import com.example.digitalid.entities.User;

import java.sql.Blob;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import androidx.annotation.Nullable;

import static com.example.digitalid.entities.Constants.CONST_DATABASE_NAME;
import static com.example.digitalid.entities.Constants.CONST_DATABASE_VERSION;

public class DocumentDatabaseHelper extends SQLiteOpenHelper {
    private static final String TAG = UserDatabaseHelper.class.getName();

    private static DocumentDatabaseHelper mInstance = null;
    private Context context;

    //create database constants
    private static final String DATABASE_NAME = CONST_DATABASE_NAME;
    private static final Integer DATABASE_VERSION = CONST_DATABASE_VERSION;
    private static final String TABLE_DOCUMENT = "document";

    //create constants for the table's column name
    private static final String COL_ID = "ID";
    private static final String COL_DOCUMENTNAME = "DOCUMENTNAME";
    private static final String COL_DOCUMENTTYPE = "DOCUMENTTYPE";
    private static final String COL_USERID = "USERID";
    private static final String COL_IMAGE = "IMAGE";

    //create sql statements initial version
    //user Table
    private static final String CREATE_DOCUMENT_TABLE_ST = "CREATE TABLE " + TABLE_DOCUMENT + "(" + COL_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COL_DOCUMENTNAME + " TEXT, " +
            COL_DOCUMENTTYPE + " TEXT, " +
            COL_USERID + " INTEGER, " +
            COL_IMAGE + " BLOB, " +
            "FOREIGN KEY(document_user) REFERENCES user(id)"+
            " )";

    private static final String DROP_DOCUMENT_TABLE_ST = "DROP TABLE IF EXISTS " + TABLE_DOCUMENT;
    private static final String GET_ALL_DOCUMENTS_BY_USER_ST = "SELECT * FROM " + TABLE_DOCUMENT + " WHERE " + COL_USERID + "= ?";
    private static final String GET_DOCUMENTS_BY_DOCUMENTID = "SELECT * FROM " + TABLE_DOCUMENT + " WHERE " + COL_ID + "= ?";

    public static synchronized DocumentDatabaseHelper getInstance(Context ctx) {
        if (mInstance == null) {
            mInstance = new DocumentDatabaseHelper(ctx.getApplicationContext());
        }
        return mInstance;
    }

    /**
     * Set the new version of the database (newVersion specified in the constant DATABASE_VERSION),
     * if the database new version is greater than the
     * database version stored inside of the database( oldVersion, written there when the db was created ) then
     * the onUpgrade method will be called.
     *
     * @param context provides access to the Activity resources
     */
    private DocumentDatabaseHelper(@Nullable Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {

    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    }
    /**
     * Add a user to the database
     * @param documentName          document's name
     * @param documentType      document type
     * @param image       photo pf document
     * @param userId         User's id
     * @return      if it succeeded, the autogenerated id (primary key) of the recently added User
     *              otherwise -1
     */
    public Long insertDocument(String documentName, String documentType, Blob image, Long userId) {
        //create an instance of SQLITE database
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(COL_DOCUMENTNAME, documentName);
        contentValues.put(COL_DOCUMENTTYPE, documentType);
        contentValues.put(COL_IMAGE, image.toString());
        contentValues.put(COL_USERID, userId);

        long result = db.insert(TABLE_DOCUMENT, null, contentValues);
        db.close();
        //if result is -1  insert was not performed due to an error, otherwise will have the row ID of the newly inserted row
        return result;
    }

    /**
     * @return  A cursor of all documents in the table called document.
     */
    private Cursor getAllDocumentsByUser(User user) {
        SQLiteDatabase db = this.getReadableDatabase();
        return db.rawQuery(GET_ALL_DOCUMENTS_BY_USER_ST, new String[]{user.getId().toString()});
    }

    /**
     * Update a document record in the database
     * @param documentName          document's name
     * @param documentType      document type
     * @param image       photo pf document
     * @param userId         User's id
     * @return      true is the document record in the database was updated, otherwise false.
     */
    public boolean updateDocument(Long id, String documentName, String documentType, Blob image, Long userId) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put(COL_ID, id);
        contentValues.put(COL_DOCUMENTNAME, documentName);
        contentValues.put(COL_DOCUMENTTYPE, documentType);
        contentValues.put(COL_IMAGE, image.toString());
        contentValues.put(COL_USERID, userId);

        int numOfRowsUpdated = db.update(TABLE_DOCUMENT, contentValues, "ID = ?", new String[]{id.toString()});
        db.close();
        return numOfRowsUpdated == 1; //if your query is going to update more than 1 record (this is not the case) then the condition will be numRowsUpdated > 0
    }

    /**
     * Delete a document from the database
     * @param id    document's primary key
     * @return      true if the document was deleted, otherwise false
     */
    public boolean deleteDocument(Long id) {
        SQLiteDatabase db = this.getWritableDatabase();
        //delete return the # of rows affected by the query
        int numOfRowsDeleted = db.delete(TABLE_DOCUMENT, "ID = ?", new String[]{id.toString()});
        db.close();
        return numOfRowsDeleted == 1;//if your query is going to delete more than 1 record (this is not the case) then the condition will be numOfRowsDeleted > 0
    }



    /**
     * @return a list of all documents from the database table called document
     */
    public List<Document> getDocuments(User user) {
        List<Document> documents = new ArrayList<>();
        Cursor cursor = getAllDocumentsByUser(user);

        if(cursor.getCount() > 0) {
            Document document = null;
            while (cursor.moveToNext()) {
                Long id = cursor.getLong(0);
                String documentName = cursor.getString(1);
                String documentType = cursor.getString(2);
                byte[] imageByte = cursor.getBlob(3);
                Integer userId = cursor.getInt(4);

                document = new Document(id, documentName, documentType, imageByte.toString() , userId);
                documents.add(document);
            }
        }
        cursor.close();
        return documents;
    }

    public Document getDocument(Long id) {
        SQLiteDatabase db = this.getReadableDatabase();
        Document document = null;
        Cursor cursor = db.rawQuery(GET_DOCUMENTS_BY_DOCUMENTID, new String[]{id.toString()});

        if(cursor.getCount() > 0 ){
            while (cursor.moveToNext()){
                String documentName = cursor.getString(1);
                String documentType = cursor.getString(2);
                byte[] imageByte = cursor.getBlob(3);
                Integer userId = cursor.getInt(4);

                document = new Document(id, documentName, documentType, imageByte.toString() , userId);
            }
        }
        cursor.close();
        return document;
    }
}
